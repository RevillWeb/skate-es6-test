{"version":3,"file":"dist/index-with-deps.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 3fab2c5996a9e02ee941","webpack:///src/util/symbols.js","webpack:///src/util/get-prop-names-and-symbols.js","webpack:///src/util/is-type.js","webpack:///src/util/root.js","webpack:///src/util/assign.js","webpack:///src/util/data.js","webpack:///src/util/empty.js","webpack:///src/api/props.js","webpack:///src/api/component.js","webpack:///src/util/attributes-manager.js","webpack:///src/util/get-props-map.js","webpack:///src/util/set-ctor-native-property.js","webpack:///src/util/to-null-or-string.js","webpack:///./~/incremental-dom/dist/incremental-dom-cjs.js","webpack:///./~/process/browser.js","webpack:///src/index.js","webpack:///src/api/define.js","webpack:///src/api/emit.js","webpack:///src/api/link.js","webpack:///src/api/prop.js","webpack:///src/api/ready.js","webpack:///src/api/symbols.js","webpack:///src/api/vdom.js","webpack:///src/lifecycle/props-init.js","webpack:///src/polyfills/object-is.js","webpack:///src/util/create-symbol.js","webpack:///src/util/dash-case.js","webpack:///src/util/debounce.js","webpack:///src/util/error.js","webpack:///src/util/get-default-value.js","webpack:///src/util/get-initial-value.js","webpack:///src/util/get-own-property-descriptors.js","webpack:///src/util/get-prop-data.js","webpack:///src/util/native.js","webpack:///src/util/prop-context.js","webpack:///src/util/prop-definition.js","webpack:///src/util/unique-id.js","webpack:///(webpack)/buildin/global.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"skate\"] = factory();\n\telse\n\t\troot[\"skate\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 38);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3fab2c5996a9e02ee941","export const connected = '____skate_connected';\nexport const created = '____skate_created';\n\n// DEPRECATED\n//\n// This is the only \"symbol\" that must stay a string. This is because it is\n// relied upon across several versions. We should remove it, but ensure that\n// it's considered a breaking change that whatever version removes it cannot\n// be passed to vdom functions as tag names.\nexport const name = '____skate_name';\n\n// Used on the Constructor\nexport const ctorCreateInitProps = '____skate_ctor_createInitProps';\nexport const ctorObservedAttributes = '____skate_ctor_observedAttributes';\nexport const ctorProps = '____skate_ctor_props';\nexport const ctorPropsMap = '____skate_ctor_propsMap';\n\n// Used on the Element\nexport const props = '____skate_props';\nexport const ref = '____skate_ref';\nexport const renderer = '____skate_renderer';\nexport const rendering = '____skate_rendering';\nexport const rendererDebounced = '____skate_rendererDebounced';\nexport const updated = '____skate_updated';\n\n\n\n// WEBPACK FOOTER //\n// src/util/symbols.js","import { isFunction } from './is-type';\n/**\n * Returns array of owned property names and symbols for the given object\n */\nexport default function getPropNamesAndSymbols (obj = {}) {\n  const listOfKeys = Object.getOwnPropertyNames(obj);\n  return isFunction(Object.getOwnPropertySymbols)\n    ? listOfKeys.concat(Object.getOwnPropertySymbols(obj))\n    : listOfKeys;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/get-prop-names-and-symbols.js","export const isFunction = val => typeof val === 'function';\nexport const isObject = val => (typeof val === 'object' && val !== null);\nexport const isString = val => typeof val === 'string';\nexport const isSymbol = val => typeof val === 'symbol';\nexport const isUndefined = val => typeof val === 'undefined';\n\n\n\n// WEBPACK FOOTER //\n// src/util/is-type.js","export default typeof window === 'undefined' ? global : window;\n\n\n\n// WEBPACK FOOTER //\n// src/util/root.js","import getPropNamesAndSymbols from './get-prop-names-and-symbols';\n\n// We are not using Object.assign if it is defined since it will cause problems when Symbol is polyfilled.\n// Apparently Object.assign (or any polyfill for this method) does not copy non-native Symbols.\nexport default (obj, ...args) => {\n  args.forEach(arg => getPropNamesAndSymbols(arg).forEach(nameOrSymbol => obj[nameOrSymbol] = arg[nameOrSymbol])); // eslint-disable-line no-return-assign\n  return obj;\n};\n\n\n\n// WEBPACK FOOTER //\n// src/util/assign.js","export default function (element, namespace = '') {\n  const data = element.__SKATE_DATA || (element.__SKATE_DATA = {});\n  return namespace && (data[namespace] || (data[namespace] = {})) || data; // eslint-disable-line no-mixed-operators\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/data.js","export default function (val) {\n  return typeof val === 'undefined' || val === null;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/empty.js","import { renderer as $renderer } from '../util/symbols';\nimport assign from '../util/assign';\nimport getPropNamesAndSymbols from '../util/get-prop-names-and-symbols';\nimport getPropsMap from '../util/get-props-map';\nimport { isUndefined } from '../util/is-type';\n\nfunction get (elem) {\n  const props = {};\n\n  getPropNamesAndSymbols(getPropsMap(elem.constructor)).forEach((nameOrSymbol) => {\n    props[nameOrSymbol] = elem[nameOrSymbol];\n  });\n\n  return props;\n}\n\nfunction set (elem, newProps) {\n  assign(elem, newProps);\n  if (elem[$renderer]) {\n    elem[$renderer]();\n  }\n}\n\nexport default function (elem, newProps) {\n  return isUndefined(newProps) ? get(elem) : set(elem, newProps);\n}\n\n\n\n// WEBPACK FOOTER //\n// src/api/props.js","import { patchInner } from 'incremental-dom';\nimport {\n  connected as $connected,\n  created as $created,\n  ctorObservedAttributes as $ctorObservedAttributes,\n  ctorProps as $ctorProps,\n  ctorCreateInitProps as $ctorCreateInitProps,\n  props as $props,\n  renderer as $renderer,\n  rendererDebounced as $rendererDebounced,\n  rendering as $rendering,\n  updated as $updated\n} from '../util/symbols';\nimport assign from '../util/assign';\nimport createSymbol from '../util/create-symbol';\nimport data from '../util/data';\nimport debounce from '../util/debounce';\nimport getAttrMgr from '../util/attributes-manager';\nimport getOwnPropertyDescriptors from '../util/get-own-property-descriptors';\nimport getPropNamesAndSymbols from '../util/get-prop-names-and-symbols';\nimport getPropsMap from '../util/get-props-map';\nimport getSetProps from './props';\nimport { createNativePropertyDescriptor } from '../lifecycle/props-init';\nimport { isFunction } from '../util/is-type';\nimport objectIs from '../polyfills/object-is';\nimport setCtorNativeProperty from '../util/set-ctor-native-property';\nimport root from '../util/root';\n\nconst HTMLElement = root.HTMLElement || class {};\nconst _prevName = createSymbol('prevName');\nconst _prevOldValue = createSymbol('prevOldValue');\nconst _prevNewValue = createSymbol('prevNewValue');\n\n// TEMPORARY: Once deprecations in this file are removed, this can be removed.\nfunction deprecated (elem, oldUsage, newUsage) {\n  if (process.env.NODE_ENV !== 'production') {\n    const ownerName = elem.localName ? elem.localName : String(elem);\n    console.warn(`${ownerName} ${oldUsage} is deprecated. Use ${newUsage}.`);\n  }\n}\n\nfunction preventDoubleCalling (elem, name, oldValue, newValue) {\n  return name === elem[_prevName] &&\n    oldValue === elem[_prevOldValue] &&\n    newValue === elem[_prevNewValue];\n}\n\n// TODO remove when not catering to Safari < 10.\nfunction createNativePropertyDescriptors (Ctor) {\n  const propDefs = getPropsMap(Ctor);\n  return getPropNamesAndSymbols(propDefs).reduce((propDescriptors, nameOrSymbol) => {\n    propDescriptors[nameOrSymbol] = createNativePropertyDescriptor(propDefs[nameOrSymbol]);\n    return propDescriptors;\n  }, {});\n}\n\n// TODO refactor when not catering to Safari < 10.\n//\n// We should be able to simplify this where all we do is Object.defineProperty().\nfunction createInitProps (Ctor) {\n  const propDescriptors = createNativePropertyDescriptors(Ctor);\n\n  return (elem) => {\n    getPropNamesAndSymbols(propDescriptors).forEach((nameOrSymbol) => {\n      const propDescriptor = propDescriptors[nameOrSymbol];\n      propDescriptor.beforeDefineProperty(elem);\n\n      // We check here before defining to see if the prop was specified prior\n      // to upgrading.\n      const hasPropBeforeUpgrading = nameOrSymbol in elem;\n\n      // This is saved prior to defining so that we can set it after it it was\n      // defined prior to upgrading. We don't want to invoke the getter if we\n      // don't need to, so we only get the value if we need to re-sync.\n      const valueBeforeUpgrading = hasPropBeforeUpgrading && elem[nameOrSymbol];\n\n      // https://bugs.webkit.org/show_bug.cgi?id=49739\n      //\n      // When Webkit fixes that bug so that native property accessors can be\n      // retrieved, we can move defining the property to the prototype and away\n      // from having to do if for every instance as all other browsers support\n      // this.\n      Object.defineProperty(elem, nameOrSymbol, propDescriptor);\n\n      // DEPRECATED\n      //\n      // We'll be removing get / set callbacks on properties. Use the\n      // updatedCallback() instead.\n      //\n      // We re-set the prop if it was specified prior to upgrading because we\n      // need to ensure set() is triggered both in polyfilled environments and\n      // in native where the definition may be registerd after elements it\n      // represents have already been created.\n      if (hasPropBeforeUpgrading) {\n        elem[nameOrSymbol] = valueBeforeUpgrading;\n      }\n    });\n  };\n}\n\nexport default class extends HTMLElement {\n  static is = ''\n\n  /**\n   * Returns unique attribute names configured with props and\n   * those set on the Component constructor if any\n   */\n  static get observedAttributes () {\n    const attrsOnCtor = this.hasOwnProperty($ctorObservedAttributes) ? this[$ctorObservedAttributes] : [];\n    const propDefs = getPropsMap(this);\n\n    // Use Object.keys to skips symbol props since they have no linked attributes\n    const attrsFromLinkedProps = Object.keys(propDefs).map(propName =>\n      propDefs[propName].attrSource).filter(Boolean);\n\n    const all = attrsFromLinkedProps.concat(attrsOnCtor).concat(super.observedAttributes);\n    return all.filter((item, index) =>\n      all.indexOf(item) === index);\n  }\n\n  static set observedAttributes (value) {\n    value = Array.isArray(value) ? value : [];\n    setCtorNativeProperty(this, 'observedAttributes', value);\n  }\n\n  // Returns superclass props overwritten with this Component props\n  static get props () {\n    return assign({}, super.props, this[$ctorProps]);\n  }\n\n  static set props (value) {\n    setCtorNativeProperty(this, $ctorProps, value);\n  }\n\n  // Passing args is designed to work with document-register-element. It's not\n  // necessary for the webcomponents/custom-element polyfill.\n  constructor (...args) {\n    super(...args);\n\n    const { constructor } = this;\n\n    // Used for the ready() function so it knows when it can call its callback.\n    this[$created] = true;\n\n    // TODO refactor to not cater to Safari < 10. This means we can depend on\n    // built-in property descriptors.\n    // Must be defined on constructor and not from a superclass\n    if (!constructor.hasOwnProperty($ctorCreateInitProps)) {\n      setCtorNativeProperty(constructor, $ctorCreateInitProps, createInitProps(constructor));\n    }\n\n    // Set up a renderer that is debounced for property sets to call directly.\n    this[$rendererDebounced] = debounce(this[$renderer].bind(this));\n\n    // Set up property lifecycle.\n    const propDefsCount = getPropNamesAndSymbols(getPropsMap(constructor)).length;\n    if (propDefsCount && constructor[$ctorCreateInitProps]) {\n      constructor[$ctorCreateInitProps](this);\n    }\n\n    // DEPRECATED\n    //\n    // static render()\n    // Note that renderCallback is an optional method!\n    if (!this.renderCallback && constructor.render) {\n      deprecated(this, 'static render', 'renderCallback');\n      this.renderCallback = constructor.render.bind(constructor, this);\n    }\n\n    // DEPRECATED\n    //\n    // static created()\n    //\n    // Props should be set up before calling this.\n    const { created } = constructor;\n    if (isFunction(created)) {\n      deprecated(this, 'static created', 'constructor');\n      created(this);\n    }\n\n    // DEPRECATED\n    //\n    // Feature has rarely been used.\n    //\n    // Created should be set before invoking the ready listeners.\n    const elemData = data(this);\n    const readyCallbacks = elemData.readyCallbacks;\n    if (readyCallbacks) {\n      readyCallbacks.forEach(cb => cb(this));\n      delete elemData.readyCallbacks;\n    }\n  }\n\n  // Custom Elements v1\n  connectedCallback () {\n    // Reflect attributes pending values\n    getAttrMgr(this).resumeAttributesUpdates();\n\n    // Used to check whether or not the component can render.\n    this[$connected] = true;\n\n    // Render!\n    this[$rendererDebounced]();\n\n    // DEPRECATED\n    //\n    // static attached()\n    const { attached } = this.constructor;\n    if (isFunction(attached)) {\n      deprecated(this, 'static attached', 'connectedCallback');\n      attached(this);\n    }\n\n    // DEPRECATED\n    //\n    // We can remove this once all browsers support :defined.\n    this.setAttribute('defined', '');\n  }\n\n  // Custom Elements v1\n  disconnectedCallback () {\n    // Suspend updating attributes until re-connected\n    getAttrMgr(this).suspendAttributesUpdates();\n\n    // Ensures the component can't be rendered while disconnected.\n    this[$connected] = false;\n\n    // DEPRECATED\n    //\n    // static detached()\n    const { detached } = this.constructor;\n    if (isFunction(detached)) {\n      deprecated(this, 'static detached', 'disconnectedCallback');\n      detached(this);\n    }\n  }\n\n  // Custom Elements v1\n  attributeChangedCallback (name, oldValue, newValue) {\n    // Polyfill calls this twice.\n    if (preventDoubleCalling(this, name, oldValue, newValue)) {\n      return;\n    }\n\n    // Set data so we can prevent double calling if the polyfill.\n    this[_prevName] = name;\n    this[_prevOldValue] = oldValue;\n    this[_prevNewValue] = newValue;\n\n    const propNameOrSymbol = data(this, 'attrSourceLinks')[name];\n    if (propNameOrSymbol) {\n      const changedExternally = getAttrMgr(this).onAttributeChanged(name, newValue);\n      if (changedExternally) {\n        // Sync up the property.\n        const propDef = getPropsMap(this.constructor)[propNameOrSymbol];\n        const newPropVal = newValue !== null && propDef.deserialize\n          ? propDef.deserialize(newValue)\n          : newValue;\n\n        const propData = data(this, 'props')[propNameOrSymbol];\n        propData.settingPropFromAttrSource = true;\n        this[propNameOrSymbol] = newPropVal;\n        propData.settingPropFromAttrSource = false;\n      }\n    }\n\n    // DEPRECATED\n    //\n    // static attributeChanged()\n    const { attributeChanged } = this.constructor;\n    if (isFunction(attributeChanged)) {\n      deprecated(this, 'static attributeChanged', 'attributeChangedCallback');\n      attributeChanged(this, { name, newValue, oldValue });\n    }\n  }\n\n  // Skate\n  updatedCallback (prevProps) {\n    if (this.constructor.hasOwnProperty('updated')) {\n      deprecated(this, 'static updated', 'updatedCallback');\n    }\n    return this.constructor.updated(this, prevProps);\n  }\n\n  // Skate\n  renderedCallback () {\n    if (this.constructor.hasOwnProperty('rendered')) {\n      deprecated(this, 'static rendered', 'renderedCallback');\n    }\n    return this.constructor.rendered(this);\n  }\n\n  // Skate\n  //\n  // Maps to the static renderer() callback. That logic should be moved here\n  // when that is finally removed.\n  // TODO: finalize how to support different rendering strategies.\n  rendererCallback () {\n    // TODO: cannot move code here because tests expects renderer function to still exist on constructor!\n    return this.constructor.renderer(this);\n  }\n\n  // Skate\n  // @internal\n  // Invokes the complete render lifecycle.\n  [$renderer] () {\n    if (this[$rendering] || !this[$connected]) {\n      return;\n    }\n\n    // Flag as rendering. This prevents anything from trying to render - or\n    // queueing a render - while there is a pending render.\n    this[$rendering] = true;\n    if (this[$updated]() && isFunction(this.renderCallback)) {\n      this.rendererCallback();\n      this.renderedCallback();\n    }\n\n    this[$rendering] = false;\n  }\n\n  // Skate\n  // @internal\n  // Calls the updatedCallback() with previous props.\n  [$updated] () {\n    const prevProps = this[$props];\n    this[$props] = getSetProps(this);\n    return this.updatedCallback(prevProps);\n  }\n\n  // Skate\n  static extend (definition = {}, Base = this) {\n    // Create class for the user.\n    class Ctor extends Base {}\n\n    // For inheriting from the object literal.\n    const opts = getOwnPropertyDescriptors(definition);\n    const prot = getOwnPropertyDescriptors(definition.prototype);\n\n    // Prototype is non configurable (but is writable).\n    delete opts.prototype;\n\n    // Pass on static and instance members from the definition.\n    Object.defineProperties(Ctor, opts);\n    Object.defineProperties(Ctor.prototype, prot);\n\n    return Ctor;\n  }\n\n  // Skate\n  //\n  // DEPRECATED\n  //\n  // Stubbed in case any subclasses are calling it.\n  static rendered () {}\n\n  // Skate\n  //\n  // DEPRECATED\n  //\n  // Move this to rendererCallback() before removing.\n  static renderer (elem) {\n    if (!elem.shadowRoot) {\n      elem.attachShadow({ mode: 'open' });\n    }\n    patchInner(elem.shadowRoot, () => {\n      const possibleFn = elem.renderCallback(elem);\n      if (isFunction(possibleFn)) {\n        possibleFn();\n      } else if (Array.isArray(possibleFn)) {\n        possibleFn.forEach((fn) => {\n          if (isFunction(fn)) {\n            fn();\n          }\n        });\n      }\n    });\n  }\n\n  // Skate\n  //\n  // DEPRECATED\n  //\n  // Move this to updatedCallback() before removing.\n  static updated (elem, previousProps) {\n    // The 'previousProps' will be undefined if it is the initial render.\n    if (!previousProps) {\n      return true;\n    }\n\n    // The 'previousProps' will always contain all of the keys.\n    //\n    // Use classic loop because:\n    // 'for ... in' skips symbols and 'for ... of' is not working yet with IE!?\n    // for (let nameOrSymbol of getPropNamesAndSymbols(previousProps)) {\n    const namesAndSymbols = getPropNamesAndSymbols(previousProps);\n    for (let i = 0; i < namesAndSymbols.length; i++) {\n      const nameOrSymbol = namesAndSymbols[i];\n\n      // With Object.is NaN is equal to NaN\n      if (!objectIs(previousProps[nameOrSymbol], elem[nameOrSymbol])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/api/component.js","import toNullOrString from './to-null-or-string';\nimport { isUndefined } from './is-type';\n\n/**\n * @internal\n * Attributes Manager\n *\n * Postpones attributes updates until when connected.\n */\nclass AttributesManager {\n  constructor (elem) {\n    this.elem = elem;\n    this.connected = false;\n    this.pendingValues = {};\n    this.lastSetValues = {};\n  }\n\n  /**\n   * Called from disconnectedCallback\n   */\n  suspendAttributesUpdates () {\n    this.connected = false;\n  }\n\n  /**\n   * Called from connectedCallback\n   */\n  resumeAttributesUpdates () {\n    this.connected = true;\n    const names = Object.keys(this.pendingValues);\n    names.forEach(name => {\n      const value = this.pendingValues[name];\n      // Skip if already cleared\n      if (!isUndefined(value)) {\n        delete this.pendingValues[name];\n        this._syncAttrValue(name, value);\n      }\n    });\n  }\n\n  /**\n   * Returns true if the value is different from the one set internally\n   * using setAttrValue()\n   */\n  onAttributeChanged (name, value) {\n    value = toNullOrString(value);\n\n    // A new attribute value voids the pending one\n    this._clearPendingValue(name);\n\n    const changed = this.lastSetValues[name] !== value;\n    this.lastSetValues[name] = value;\n    return changed;\n  }\n\n  /**\n   * Updates or removes the attribute if value === null.\n   *\n   * When the component is not connected the value is saved and\n   * the attribute is only updated when the component is re-connected.\n   */\n  setAttrValue (name, value) {\n    value = toNullOrString(value);\n\n    this.lastSetValues[name] = value;\n\n    if (this.connected) {\n      this._clearPendingValue(name);\n      this._syncAttrValue(name, value);\n    } else {\n      this.pendingValues[name] = value;\n    }\n  }\n\n  _syncAttrValue (name, value) {\n    const currAttrValue = toNullOrString(this.elem.getAttribute(name));\n    if (value !== currAttrValue) {\n      if (value === null) {\n        this.elem.removeAttribute(name);\n      } else {\n        this.elem.setAttribute(name, value);\n      }\n    }\n  }\n\n  _clearPendingValue (name) {\n    if (name in this.pendingValues) {\n      delete this.pendingValues[name];\n    }\n  }\n}\n\n// Only used by getAttrMgr\nconst $attributesMgr = '____skate_attributesMgr';\n\n/**\n * @internal\n * Returns attribute manager instance for the given Component\n */\nexport default function getAttrMgr (elem) {\n  let mgr = elem[$attributesMgr];\n  if (!mgr) {\n    mgr = new AttributesManager(elem);\n    elem[$attributesMgr] = mgr;\n  }\n  return mgr;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/attributes-manager.js","import {\n  ctorPropsMap as $ctorPropsMap\n} from './symbols';\nimport getPropNamesAndSymbols from './get-prop-names-and-symbols';\nimport PropDefinition from './prop-definition';\nimport setCtorNativeProperty from './set-ctor-native-property';\n\n/**\n * Memoizes a map of PropDefinition for the given component class.\n * Keys in the map are the properties name which can a string or a symbol.\n *\n * The map is created from the result of: static get props\n */\nexport default function getPropsMap (Ctor) {\n  // Must be defined on constructor and not from a superclass\n  if (!Ctor.hasOwnProperty($ctorPropsMap)) {\n    const props = Ctor.props || {};\n\n    const propsMap = getPropNamesAndSymbols(props).reduce((result, nameOrSymbol) => {\n      result[nameOrSymbol] = new PropDefinition(nameOrSymbol, props[nameOrSymbol]);\n      return result;\n    }, {});\n    setCtorNativeProperty(Ctor, $ctorPropsMap, propsMap);\n  }\n\n  return Ctor[$ctorPropsMap];\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/get-props-map.js","/**\n * This is needed to avoid IE11 \"stack size errors\" when creating\n * a new property on the constructor of an HTMLElement\n */\nexport default function setCtorNativeProperty (Ctor, propName, value) {\n  Object.defineProperty(Ctor, propName, { configurable: true, value });\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/set-ctor-native-property.js","import empty from './empty';\n/**\n * Attributes value can only be null or string;\n */\nconst toNullOrString = val => (empty(val) ? null : String(val));\n\nexport default toNullOrString;\n\n\n\n// WEBPACK FOOTER //\n// src/util/to-null-or-string.js","\n/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nvar has = function (map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nvar createMap = function () {\n  return create(null);\n};\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {?Object<string, !Element>}\n   */\n  this.keyMap = null;\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nvar initData = function (node, nodeName, key) {\n  var data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {Node} node The node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nvar getData = function (node) {\n  var data = node['__incrementalDOMData'];\n\n  if (!data) {\n    var nodeName = node.nodeName.toLowerCase();\n    var key = null;\n\n    if (node instanceof Element) {\n      key = node.getAttribute('key');\n    }\n\n    data = initData(node, nodeName, key);\n  }\n\n  return data;\n};\n\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nvar symbols = {\n  default: '__default',\n\n  placeholder: '__placeholder'\n};\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nvar getNamespace = function (name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nvar applyAttr = function (el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    var attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nvar applyProp = function (el, name, value) {\n  el[name] = value;\n};\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nvar applyStyle = function (el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    var elStyle = el.style;\n    var obj = /** @type {!Object<string,string>} */style;\n\n    for (var prop in obj) {\n      if (has(obj, prop)) {\n        elStyle[prop] = obj[prop];\n      }\n    }\n  }\n};\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nvar applyAttributeTyped = function (el, name, value) {\n  var type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */value);\n  }\n};\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nvar updateAttribute = function (el, name, value) {\n  var data = getData(el);\n  var attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  var mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nvar attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes[symbols.placeholder] = function () {};\n\nattributes['style'] = applyStyle;\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nvar getNamespaceForTag = function (tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element.\n * @return {!Element}\n */\nvar createElement = function (doc, parent, tag, key, statics) {\n  var namespace = getNamespaceForTag(tag, parent);\n  var el = undefined;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  if (statics) {\n    for (var i = 0; i < statics.length; i += 2) {\n      updateAttribute(el, /** @type {!string}*/statics[i], statics[i + 1]);\n    }\n  }\n\n  return el;\n};\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nvar createText = function (doc) {\n  var node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n/**\n * Creates a mapping that can be used to look up children using a key.\n * @param {?Node} el\n * @return {!Object<string, !Element>} A mapping of keys to the children of the\n *     Element.\n */\nvar createKeyMap = function (el) {\n  var map = createMap();\n  var child = el.firstElementChild;\n\n  while (child) {\n    var key = getData(child).key;\n\n    if (key) {\n      map[key] = child;\n    }\n\n    child = child.nextElementSibling;\n  }\n\n  return map;\n};\n\n/**\n * Retrieves the mapping of key to child node for a given Element, creating it\n * if necessary.\n * @param {?Node} el\n * @return {!Object<string, !Node>} A mapping of keys to child Elements\n */\nvar getKeyMap = function (el) {\n  var data = getData(el);\n\n  if (!data.keyMap) {\n    data.keyMap = createKeyMap(el);\n  }\n\n  return data.keyMap;\n};\n\n/**\n * Retrieves a child from the parent with the given key.\n * @param {?Node} parent\n * @param {?string=} key\n * @return {?Node} The child corresponding to the key.\n */\nvar getChild = function (parent, key) {\n  return key ? getKeyMap(parent)[key] : null;\n};\n\n/**\n * Registers an element as being a child. The parent will keep track of the\n * child using the key. The child can be retrieved using the same key using\n * getKeyMap. The provided key should be unique within the parent Element.\n * @param {?Node} parent The parent of child.\n * @param {string} key A key to identify the child with.\n * @param {!Node} child The child to register.\n */\nvar registerChild = function (parent, key, child) {\n  getKeyMap(parent)[key] = child;\n};\n\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nvar notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function (node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function (node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function () {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n/**\n* Makes sure that keyed Element matches the tag name provided.\n* @param {!string} nodeName The nodeName of the node that is being matched.\n* @param {string=} tag The tag name of the Element.\n* @param {?string=} key The key of the Element.\n*/\nvar assertKeyedTagMatches = function (nodeName, tag, key) {\n  if (nodeName !== tag) {\n    throw new Error('Was expecting node with key \"' + key + '\" to be a ' + tag + ', not a ' + nodeName + '.');\n  }\n};\n\n/** @type {?Context} */\nvar context = null;\n\n/** @type {?Node} */\nvar currentNode = null;\n\n/** @type {?Node} */\nvar currentParent = null;\n\n/** @type {?Element|?DocumentFragment} */\nvar root = null;\n\n/** @type {?Document} */\nvar doc = null;\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=)} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=)}\n * @template T\n */\nvar patchFactory = function (run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @template T\n   */\n  var f = function (node, fn, data) {\n    var prevContext = context;\n    var prevRoot = root;\n    var prevDoc = doc;\n    var prevCurrentNode = currentNode;\n    var prevCurrentParent = currentParent;\n    var previousInAttributes = false;\n    var previousInSkip = false;\n\n    context = new Context();\n    root = node;\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if ('production' !== 'production') {}\n\n    run(node, fn, data);\n\n    if ('production' !== 'production') {}\n\n    context.notifyChanges();\n\n    context = prevContext;\n    root = prevRoot;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n  };\n  return f;\n};\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @template T\n */\nvar patchInner = patchFactory(function (node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if ('production' !== 'production') {}\n});\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @template T\n */\nvar patchOuter = patchFactory(function (node, fn, data) {\n  currentNode = /** @type {!Element} */{ nextSibling: node };\n\n  fn(data);\n\n  if ('production' !== 'production') {}\n});\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nvar matches = function (nodeName, key) {\n  var data = getData(currentNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n * @param {?Array<*>=} statics For an Element, this should be an array of\n *     name-value pairs.\n */\nvar alignWithDOM = function (nodeName, key, statics) {\n  if (currentNode && matches(nodeName, key)) {\n    return;\n  }\n\n  var node = undefined;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    node = getChild(currentParent, key);\n    if (node && 'production' !== 'production') {\n      assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key, statics);\n    }\n\n    if (key) {\n      registerChild(currentParent, key, node);\n    }\n\n    context.markCreated(node);\n  }\n\n  // If the node has a key, remove it from the DOM to prevent a large number\n  // of re-orders in the case that it moved far or was completely removed.\n  // Since we hold on to a reference through the keyMap, we can always add it\n  // back.\n  if (currentNode && getData(currentNode).key) {\n    currentParent.replaceChild(node, currentNode);\n    getData(currentParent).keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nvar clearUnvisitedDOM = function () {\n  var node = currentParent;\n  var data = getData(node);\n  var keyMap = data.keyMap;\n  var keyMapValid = data.keyMapValid;\n  var child = node.lastChild;\n  var key = undefined;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  if (data.attrs[symbols.placeholder] && node !== root) {\n    if ('production' !== 'production') {}\n    return;\n  }\n\n  while (child !== currentNode) {\n    node.removeChild(child);\n    context.markDeleted( /** @type {!Node}*/child);\n\n    key = getData(child).key;\n    if (key) {\n      delete keyMap[key];\n    }\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n/**\n * Changes to the first child of the current node.\n */\nvar enterNode = function () {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n/**\n * Changes to the next sibling of the current node.\n */\nvar nextNode = function () {\n  if (currentNode) {\n    currentNode = currentNode.nextSibling;\n  } else {\n    currentNode = currentParent.firstChild;\n  }\n};\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nvar exitNode = function () {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @return {!Element} The corresponding Element.\n */\nvar coreElementOpen = function (tag, key, statics) {\n  nextNode();\n  alignWithDOM(tag, key, statics);\n  enterNode();\n  return (/** @type {!Element} */currentParent\n  );\n};\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nvar coreElementClose = function () {\n  if ('production' !== 'production') {}\n\n  exitNode();\n  return (/** @type {!Element} */currentNode\n  );\n};\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nvar coreText = function () {\n  nextNode();\n  alignWithDOM('#text', null, null);\n  return (/** @type {!Text} */currentNode\n  );\n};\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nvar currentElement = function () {\n  if ('production' !== 'production') {}\n  return (/** @type {!Element} */currentParent\n  );\n};\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nvar skip = function () {\n  if ('production' !== 'production') {}\n  currentNode = currentParent.lastChild;\n};\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nvar ATTRIBUTES_OFFSET = 3;\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nvar argsBuilder = [];\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} const_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpen = function (tag, key, statics, const_args) {\n  if ('production' !== 'production') {}\n\n  var node = coreElementOpen(tag, key, statics);\n  var data = getData(node);\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  var attrsArr = data.attrsArr;\n  var newAttrs = data.newAttrs;\n  var attrsChanged = false;\n  var i = ATTRIBUTES_OFFSET;\n  var j = 0;\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    if (attrsArr[j] !== arguments[i]) {\n      attrsChanged = true;\n      break;\n    }\n  }\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    attrsArr[j] = arguments[i];\n  }\n\n  if (j < attrsArr.length) {\n    attrsChanged = true;\n    attrsArr.length = j;\n  }\n\n  /*\n   * Actually perform the attribute update.\n   */\n  if (attrsChanged) {\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n      newAttrs[arguments[i]] = arguments[i + 1];\n    }\n\n    for (var _attr in newAttrs) {\n      updateAttribute(node, _attr, newAttrs[_attr]);\n      newAttrs[_attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nvar elementOpenStart = function (tag, key, statics) {\n  if ('production' !== 'production') {}\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nvar attr = function (name, value) {\n  if ('production' !== 'production') {}\n\n  argsBuilder.push(name, value);\n};\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpenEnd = function () {\n  if ('production' !== 'production') {}\n\n  var node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nvar elementClose = function (tag) {\n  if ('production' !== 'production') {}\n\n  var node = coreElementClose();\n\n  if ('production' !== 'production') {}\n\n  return node;\n};\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} const_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementVoid = function (tag, key, statics, const_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n/**\n * Declares a virtual Element at the current location in the document that is a\n * placeholder element. Children of this Element can be manually managed and\n * will not be cleared by the library.\n *\n * A key must be specified to make sure that this node is correctly preserved\n * across all conditionals.\n *\n * @param {string} tag The element's tag.\n * @param {string} key The key used to identify this element.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} const_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementPlaceholder = function (tag, key, statics, const_args) {\n  if ('production' !== 'production') {}\n\n  elementOpen.apply(null, arguments);\n  skip();\n  return elementClose(tag);\n};\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} const_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nvar text = function (value, const_args) {\n  if ('production' !== 'production') {}\n\n  var node = coreText();\n  var data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */value;\n\n    var formatted = value;\n    for (var i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      var fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\nexports.patch = patchInner;\nexports.patchInner = patchInner;\nexports.patchOuter = patchOuter;\nexports.currentElement = currentElement;\nexports.skip = skip;\nexports.elementVoid = elementVoid;\nexports.elementOpenStart = elementOpenStart;\nexports.elementOpenEnd = elementOpenEnd;\nexports.elementOpen = elementOpen;\nexports.elementClose = elementClose;\nexports.elementPlaceholder = elementPlaceholder;\nexports.text = text;\nexports.attr = attr;\nexports.symbols = symbols;\nexports.attributes = attributes;\nexports.applyAttr = applyAttr;\nexports.applyProp = applyProp;\nexports.notifications = notifications;\n\n//# sourceMappingURL=incremental-dom-cjs.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/incremental-dom/dist/incremental-dom-cjs.js\n// module id = 13\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 14\n// module chunks = 0","import * as prop from './api/prop';\nimport * as symbols from './api/symbols';\nimport * as vdom from './api/vdom';\nimport Component from './api/component';\nimport define from './api/define';\nimport emit from './api/emit';\nimport link from './api/link';\nimport props from './api/props';\nimport ready from './api/ready';\n\nconst h = vdom.builder();\n\nexport {\n  Component,\n  define,\n  emit,\n  h,\n  link,\n  prop,\n  props,\n  ready,\n  symbols,\n  vdom\n};\n\n\n\n// WEBPACK FOOTER //\n// src/index.js","import Component from './component';\nimport uniqueId from '../util/unique-id';\nimport root from '../util/root';\n\nexport default function (...args) {\n  const { customElements, HTMLElement } = root;\n  let [ name, Ctor ] = args;\n\n  if (!customElements) {\n    throw new Error('Skate requires native custom element support or a polyfill.');\n  }\n\n  // DEPRECATED remove when removing the \"name\" argument.\n  if (process.env.NODE_ENV !== 'production' && args.length === 2) {\n    console.warn('The \"name\" argument to define() is deprecated. Please define a `static is` property on the constructor instead.');\n  }\n\n  // DEPRECATED remove when removing the \"name\" argument.\n  if (args.length === 1) {\n    Ctor = name;\n    name = null;\n  }\n\n  // DEPRECATED Object literals.\n  if (typeof Ctor === 'object') {\n    Ctor = Component.extend(Ctor);\n  }\n\n  // Ensure a custom element is passed.\n  if (!(Ctor.prototype instanceof HTMLElement)) {\n    throw new Error('You must provide a constructor that extends HTMLElement to define().');\n  }\n\n  // DEPRECATED two arguments\n  if (args.length === 2) {\n    customElements.define(customElements.get(name) ? uniqueId(name) : name, Ctor);\n  } else {\n    // We must use hasOwnProperty() because we want to know if it was specified\n    // directly on this class, not subclasses, as we don't want to inherit tag\n    // names from subclasses.\n    if (!Ctor.hasOwnProperty('is')) {\n      // If we used defineProperty() then the consumer must also use it and\n      // cannot use property initialisers. Instead we just set it so they can\n      // use whatever method of overridding that they want.\n      Ctor.is = uniqueId();\n    }\n    customElements.define(Ctor.is, Ctor);\n  }\n\n  // The spec doesn't return but this allows for a simpler, more concise API.\n  return Ctor;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/api/define.js","import root from '../util/root';\n\nconst Event = ((TheEvent) => {\n  if (TheEvent) {\n    try {\n      new TheEvent('emit-init'); // eslint-disable-line no-new\n    } catch (e) {\n      return undefined;\n    }\n  }\n  return TheEvent;\n})(root.Event);\n\nfunction createCustomEvent (name, opts = {}) {\n  const { detail } = opts;\n  delete opts.detail;\n\n  let e;\n  if (Event) {\n    e = new Event(name, opts);\n    Object.defineProperty(e, 'detail', { value: detail });\n  } else {\n    e = document.createEvent('CustomEvent');\n    Object.defineProperty(e, 'composed', { value: opts.composed });\n    e.initCustomEvent(name, opts.bubbles, opts.cancelable, detail);\n  }\n  return e;\n}\n\nexport default function (elem, name, opts = {}) {\n  if (opts.bubbles === undefined) {\n    opts.bubbles = true;\n  }\n  if (opts.cancelable === undefined) {\n    opts.cancelable = true;\n  }\n  if (opts.composed === undefined) {\n    opts.composed = true;\n  }\n  return elem.dispatchEvent(createCustomEvent(name, opts));\n}\n\n\n\n// WEBPACK FOOTER //\n// src/api/emit.js","import props from './props';\n\nfunction getValue (elem) {\n  const type = elem.type;\n  if (type === 'checkbox' || type === 'radio') {\n    return elem.checked ? elem.value || true : false;\n  }\n  return elem.value;\n}\n\nexport default function (elem, target) {\n  return (e) => {\n    // We fallback to checking the composed path. Unfortunately this behaviour\n    // is difficult to impossible to reproduce as it seems to be a possible\n    // quirk in the shadydom polyfill that incorrectly returns null for the\n    // target but has the target as the first point in the path.\n    // TODO revisit once all browsers have native support.\n    const localTarget = e.target || e.composedPath()[0];\n    const value = getValue(localTarget);\n    const localTargetName = target || localTarget.name || 'value';\n\n    if (localTargetName.indexOf('.') > -1) {\n      const parts = localTargetName.split('.');\n      const firstPart = parts[0];\n      const propName = parts.pop();\n      const obj = parts.reduce((prev, curr) => (prev && prev[curr]), elem);\n\n      obj[propName || e.target.name] = value;\n      props(elem, {\n        [firstPart]: elem[firstPart]\n      });\n    } else {\n      props(elem, {\n        [localTargetName]: value\n      });\n    }\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// src/api/link.js","import assign from '../util/assign';\nimport empty from '../util/empty';\nimport toNullOrString from '../util/to-null-or-string';\n\nexport function create (def) {\n  return (...args) => {\n    args.unshift({}, def);\n    return assign(...args);\n  };\n}\n\nconst parseIfNotEmpty = val => (empty(val) ? null : JSON.parse(val));\n\nexport const array = create({\n  coerce: val => (Array.isArray(val) ? val : (empty(val) ? null : [val])),\n  default: () => [],\n  deserialize: parseIfNotEmpty,\n  serialize: JSON.stringify\n});\n\nexport const boolean = create({\n  coerce: val => !!val,\n  default: false,\n  // TODO: 'false' string must deserialize to false for angular 1.x to work\n  // This breaks one existing test.\n  // deserialize: val => !(val === null || val === 'false'),\n  deserialize: val => !(val === null),\n  serialize: val => (val ? '' : null)\n});\n\n// defaults empty to 0 and allows NaN\nconst zeroIfEmptyOrNumberIncludesNaN = val => (empty(val) ? 0 : Number(val));\n\nexport const number = create({\n  default: 0,\n  coerce: zeroIfEmptyOrNumberIncludesNaN,\n  deserialize: zeroIfEmptyOrNumberIncludesNaN,\n  serialize: toNullOrString\n});\n\nexport const string = create({\n  default: '',\n  coerce: toNullOrString,\n  deserialize: toNullOrString,\n  serialize: toNullOrString\n});\n\nexport const object = create({\n  default: () => ({}),\n  deserialize: parseIfNotEmpty,\n  serialize: JSON.stringify\n});\n\n\n\n// WEBPACK FOOTER //\n// src/api/prop.js","import { created as $created } from '../util/symbols';\nimport data from '../util/data';\n\nexport default function (elem, done) {\n  const info = data(elem);\n  if (elem[$created]) {\n    done(elem);\n  } else if (info.readyCallbacks) {\n    info.readyCallbacks.push(done);\n  } else {\n    info.readyCallbacks = [done];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/api/ready.js","// DEPRECTAED\n//\n// We should not be relying on internals for symbols as this creates version\n// coupling. We will move forward with platform agnostic ways of doing this.\nexport { name } from '../util/symbols';\n\n\n\n// WEBPACK FOOTER //\n// src/api/symbols.js","/* eslint no-plusplus: 0 */\n\nimport {\n  applyProp,\n  attributes,\n  elementClose,\n  elementOpen as idomElementOpen,\n  skip as idomSkip,\n  symbols,\n  text\n} from 'incremental-dom';\nimport { name as $name, ref as $ref } from '../util/symbols';\nimport propContext from '../util/prop-context';\nimport root from '../util/root';\n\nconst { customElements, HTMLElement } = root;\nconst applyDefault = attributes[symbols.default];\n\n// A stack of children that corresponds to the current function helper being\n// executed.\nconst stackChren = [];\n\nconst $skip = '__skip';\nconst $currentEventHandlers = '__events';\nconst $stackCurrentHelperProps = '__props';\n\n// The current function helper in the stack.\nlet stackCurrentHelper;\n\n// This is used for the Incremental DOM overrides to keep track of what args\n// to pass the main elementOpen() function.\nlet overrideArgs;\n\n// The number of levels deep after skipping a tree.\nlet skips = 0;\n\nconst noop = () => {};\n\n// Adds or removes an event listener for an element.\nfunction applyEvent (elem, ename, newFunc) {\n  let events = elem[$currentEventHandlers];\n\n  if (!events) {\n    events = elem[$currentEventHandlers] = {};\n  }\n\n  // Undefined indicates that there is no listener yet.\n  if (typeof events[ename] === 'undefined') {\n    // We only add a single listener once. Originally this was a workaround for\n    // the Webcomponents ShadyDOM polyfill not removing listeners, but it's\n    // also a simpler model for binding / unbinding events because you only\n    // have a single handler you need to worry about and a single place where\n    // you only store one event handler\n    elem.addEventListener(ename, function (e) {\n      if (events[ename]) {\n        events[ename].call(this, e);\n      }\n    });\n  }\n\n  // Not undefined indicates that we have set a listener, so default to null.\n  events[ename] = typeof newFunc === 'function' ? newFunc : null;\n}\n\nconst attributesContext = propContext(attributes, {\n  // Attributes that shouldn't be applied to the DOM.\n  key: noop,\n  statics: noop,\n\n  // Attributes that *must* be set via a property on all elements.\n  checked: applyProp,\n  className: applyProp,\n  disabled: applyProp,\n  value: applyProp,\n\n  // Ref handler.\n  ref (elem, name, value) {\n    elem[$ref] = value;\n  },\n\n  // Skip handler.\n  skip (elem, name, value) {\n    if (value) {\n      elem[$skip] = true;\n    } else {\n      delete elem[$skip];\n    }\n  },\n\n  // Default attribute applicator.\n  [symbols.default] (elem, name, value) {\n    const ce = customElements.get(elem.localName);\n    const props = ce && ce.props || {};\n    const prototype = ce && ce.prototype || {};\n\n    // TODO when refactoring properties to not have to workaround the old\n    // WebKit bug we can remove the \"name in props\" check below.\n    //\n    // NOTE: That the \"name in elem\" check won't work for polyfilled custom\n    // elements that set a property that isn't explicitly specified in \"props\"\n    // or \"prototype\" unless it is added to the element explicitly as a\n    // property prior to passing the prop to the vdom function. For example, if\n    // it were added in a lifecycle callback because it wouldn't have been\n    // upgraded yet.\n    //\n    // We prefer setting props, so we do this if there's a property matching\n    // name that was passed. However, certain props on SVG elements are\n    // readonly and error when you try to set them.\n    if ((name in props || name in elem || name in prototype) && !('ownerSVGElement' in elem)) {\n      applyProp(elem, name, value);\n      return;\n    }\n\n    // Explicit false removes the attribute.\n    if (value === false) {\n      applyDefault(elem, name);\n      return;\n    }\n\n    // Handle built-in and custom events.\n    if (name.indexOf('on') === 0) {\n      const firstChar = name[2];\n      let eventName;\n\n      if (firstChar === '-') {\n        eventName = name.substring(3);\n      } else if (firstChar === firstChar.toUpperCase()) {\n        eventName = firstChar.toLowerCase() + name.substring(3);\n      }\n\n      if (eventName) {\n        applyEvent(elem, eventName, value);\n        return;\n      }\n    }\n\n    applyDefault(elem, name, value);\n  }\n});\n\nfunction resolveTagName (name) {\n  // We return falsy values as some wrapped IDOM functions allow empty values.\n  if (!name) {\n    return name;\n  }\n\n  // We try and return the cached tag name, if one exists. This will work with\n  // *any* web component of any version that defines a `static is` property.\n  if (name.is) {\n    return name.is;\n  }\n\n  // Get the name for the custom element by constructing it and using the\n  // localName property. Cache it and lookup the cached value for future calls.\n  if (name.prototype instanceof HTMLElement) {\n    if (name[$name]) {\n      return name[$name];\n    }\n\n    // eslint-disable-next-line\n    const elem = new name();\n    return (elem[$name] = elem.localName);\n  }\n\n  // Pass all other values through so IDOM gets what it's expecting.\n  return name;\n}\n\n// Incremental DOM's elementOpen is where the hooks in `attributes` are applied,\n// so it's the only function we need to execute in the context of our attributes.\nconst elementOpen = attributesContext(idomElementOpen);\n\nfunction elementOpenStart (tag, key = null, statics = null) {\n  overrideArgs = [tag, key, statics];\n}\n\nfunction elementOpenEnd () {\n  const node = newElementOpen(...overrideArgs); // eslint-disable-line no-use-before-define\n  overrideArgs = null;\n  return node;\n}\n\nfunction wrapIdomFunc (func, tnameFuncHandler = noop) {\n  return function wrap (...args) {\n    args[0] = resolveTagName(args[0]);\n    stackCurrentHelper = null;\n    if (typeof args[0] === 'function') {\n      // If we've encountered a function, handle it according to the type of\n      // function that is being wrapped.\n      stackCurrentHelper = args[0];\n      return tnameFuncHandler(...args);\n    } else if (stackChren.length) {\n      // We pass the wrap() function in here so that when it's called as\n      // children, it will queue up for the next stack, if there is one.\n      stackChren[stackChren.length - 1].push([wrap, args]);\n    } else {\n      if (func === elementOpen) {\n        if (skips) {\n          return ++skips;\n        }\n\n        const elem = func(...args);\n\n        if (elem[$skip]) {\n          ++skips;\n        }\n\n        return elem;\n      }\n\n      if (func === elementClose) {\n        if (skips === 1) {\n          idomSkip();\n        }\n\n        // We only want to skip closing if it's not the last closing tag in the\n        // skipped tree because we keep the element that initiated the skpping.\n        if (skips && --skips) {\n          return;\n        }\n\n        const elem = func(...args);\n        const ref = elem[$ref];\n\n        // We delete so that it isn't called again for the same element. If the\n        // ref changes, or the element changes, this will be defined again.\n        delete elem[$ref];\n\n        // Execute the saved ref after esuring we've cleand up after it.\n        if (typeof ref === 'function') {\n          ref(elem);\n        }\n\n        return elem;\n      }\n\n      // We must call elementOpenStart and elementOpenEnd even if we are\n      // skipping because they queue up attributes and then call elementClose.\n      if (!skips || (func === elementOpenStart || func === elementOpenEnd)) {\n        return func(...args);\n      }\n    }\n  };\n}\n\nfunction newAttr (...args) {\n  if (stackCurrentHelper) {\n    stackCurrentHelper[$stackCurrentHelperProps][args[0]] = args[1];\n  } else if (stackChren.length) {\n    stackChren[stackChren.length - 1].push([newAttr, args]);\n  } else {\n    overrideArgs.push(args[0]);\n    overrideArgs.push(args[1]);\n  }\n}\n\nfunction stackOpen (tname, key, statics, ...attrs) {\n  const props = { key, statics };\n  for (let a = 0; a < attrs.length; a += 2) {\n    props[attrs[a]] = attrs[a + 1];\n  }\n  tname[$stackCurrentHelperProps] = props;\n  stackChren.push([]);\n}\n\nfunction stackClose (tname) {\n  const chren = stackChren.pop();\n  const props = tname[$stackCurrentHelperProps];\n  delete tname[$stackCurrentHelperProps];\n  const elemOrFn = tname(props, () => chren.forEach(args => args[0](...args[1])));\n  return typeof elemOrFn === 'function' ? elemOrFn() : elemOrFn;\n}\n\n// Incremental DOM overrides\n// -------------------------\n\n// We must override internal functions that call internal Incremental DOM\n// functions because we can't override the internal references. This means\n// we must roughly re-implement their behaviour. Luckily, they're fairly\n// simple.\nconst newElementOpenStart = wrapIdomFunc(elementOpenStart, stackOpen);\nconst newElementOpenEnd = wrapIdomFunc(elementOpenEnd);\n\n// Standard open / closed overrides don't need to reproduce internal behaviour\n// because they are the ones referenced from *End and *Start.\nconst newElementOpen = wrapIdomFunc(elementOpen, stackOpen);\nconst newElementClose = wrapIdomFunc(elementClose, stackClose);\n\n// Ensure we call our overridden functions instead of the internal ones.\nfunction newElementVoid (tag, ...args) {\n  newElementOpen(tag, ...args);\n  return newElementClose(tag);\n}\n\n// Text override ensures their calls can queue if using function helpers.\nconst newText = wrapIdomFunc(text);\n\n// Convenience function for declaring an Incremental DOM element using\n// hyperscript-style syntax.\nexport function element (tname, attrs, ...chren) {\n  const atype = typeof attrs;\n\n  // If attributes are a function, then they should be treated as children.\n  if (atype === 'function' || atype === 'string' || atype === 'number') {\n    chren.unshift(attrs);\n  }\n\n  // Ensure the attributes are an object. Null is considered an object so we\n  // have to test for this explicitly.\n  if (attrs === null || atype !== 'object') {\n    attrs = {};\n  }\n\n  // We open the element so we can set attrs after.\n  newElementOpenStart(tname, attrs.key, attrs.statics);\n\n  // Delete so special attrs don't actually get set.\n  delete attrs.key;\n  delete attrs.statics;\n\n  // Set attributes.\n  Object.keys(attrs).forEach(name => newAttr(name, attrs[name]));\n\n  // Close before we render the descendant tree.\n  newElementOpenEnd(tname);\n\n  chren.forEach((ch) => {\n    const ctype = typeof ch;\n    if (ctype === 'function') {\n      ch();\n    } else if (ctype === 'string' || ctype === 'number') {\n      newText(ch);\n    } else if (Array.isArray(ch)) {\n      ch.forEach(sch => sch());\n    }\n  });\n\n  return newElementClose(tname);\n}\n\n// Even further convenience for building a DSL out of JavaScript functions or hooking into standard\n// transpiles for JSX (React.createElement() / h).\nexport function builder (...tags) {\n  if (tags.length === 0) {\n    return (...args) => element.bind(null, ...args);\n  }\n  return tags.map(tag =>\n    (...args) =>\n      element.bind(null, tag, ...args)\n  );\n}\n\n// We don't have to do anything special for the text function; it's just a\n// straight export from Incremental DOM.\nexport {\n  newAttr as attr,\n  newElementClose as elementClose,\n  newElementOpen as elementOpen,\n  newElementOpenEnd as elementOpenEnd,\n  newElementOpenStart as elementOpenStart,\n  newElementVoid as elementVoid,\n  newText as text\n};\n\n\n\n// WEBPACK FOOTER //\n// src/api/vdom.js","import {\n  rendererDebounced as $rendererDebounced\n} from '../util/symbols';\nimport data from '../util/data';\nimport empty from '../util/empty';\nimport getAttrMgr from '../util/attributes-manager';\nimport getDefaultValue from '../util/get-default-value';\nimport getInitialValue from '../util/get-initial-value';\nimport getPropData from '../util/get-prop-data';\n\nexport function createNativePropertyDescriptor (propDef) {\n  const { nameOrSymbol } = propDef;\n\n  const prop = {\n    configurable: true,\n    enumerable: true\n  };\n\n  prop.beforeDefineProperty = elem => {\n    const propData = getPropData(elem, nameOrSymbol);\n    const attrSource = propDef.attrSource;\n\n    // Store attrSource name to property link.\n    if (attrSource) {\n      data(elem, 'attrSourceLinks')[attrSource] = nameOrSymbol;\n    }\n\n    // prop value before upgrading\n    let initialValue = elem[nameOrSymbol];\n\n    // Set up initial value if it wasn't specified.\n    let valueFromAttrSource = false;\n    if (empty(initialValue)) {\n      if (attrSource && elem.hasAttribute(attrSource)) {\n        valueFromAttrSource = true;\n        initialValue = propDef.deserialize(elem.getAttribute(attrSource));\n      } else if ('initial' in propDef) {\n        initialValue = getInitialValue(elem, propDef);\n      } else {\n        initialValue = getDefaultValue(elem, propDef);\n      }\n    }\n\n    initialValue = propDef.coerce(initialValue);\n\n    propData.internalValue = initialValue;\n\n    // Reflect to Target Attribute\n    const mustReflect = propDef.attrTarget && !empty(initialValue) &&\n      (!valueFromAttrSource || propDef.attrTargetIsNotSource);\n\n    if (mustReflect) {\n      let serializedValue = propDef.serialize(initialValue);\n      getAttrMgr(elem).setAttrValue(propDef.attrTarget, serializedValue);\n    }\n  };\n\n  prop.get = function get () {\n    const propData = getPropData(this, nameOrSymbol);\n    const { internalValue } = propData;\n    return propDef.get ? propDef.get(this, { name: nameOrSymbol, internalValue }) : internalValue;\n  };\n\n  prop.set = function set (newValue) {\n    const propData = getPropData(this, nameOrSymbol);\n\n    const useDefaultValue = empty(newValue);\n    if (useDefaultValue) {\n      newValue = getDefaultValue(this, propDef);\n    }\n\n    newValue = propDef.coerce(newValue);\n\n    if (propDef.set) {\n      let { oldValue } = propData;\n\n      if (empty(oldValue)) {\n        oldValue = null;\n      }\n      const changeData = { name: nameOrSymbol, newValue, oldValue };\n      propDef.set(this, changeData);\n    }\n\n    // Queue a re-render.\n    this[$rendererDebounced](this);\n\n    // Update prop data so we can use it next time.\n    propData.internalValue = propData.oldValue = newValue;\n\n    // Reflect to Target attribute.\n    const mustReflect = propDef.attrTarget &&\n      (propDef.attrTargetIsNotSource || !propData.settingPropFromAttrSource);\n    if (mustReflect) {\n      // Note: setting the prop to empty implies the default value\n      // and therefore no attribute should be present!\n      let serializedValue = useDefaultValue ? null : propDef.serialize(newValue);\n      getAttrMgr(this).setAttrValue(propDef.attrTarget, serializedValue);\n    }\n  };\n\n  return prop;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/lifecycle/props-init.js","/**\n * Polyfill Object.is for IE\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nif (!Object.is) {\n  Object.is = function (x, y) {\n    // SameValue algorithm\n    if (x === y) { // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  };\n}\nexport default Object.is;\n\n\n\n// WEBPACK FOOTER //\n// src/polyfills/object-is.js","export default function createSymbol (description) {\n  return typeof Symbol === 'function' ? Symbol(description) : description;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/create-symbol.js","export default function (str) {\n  return str.split(/([A-Z])/).reduce((one, two, idx) => {\n    const dash = !one || idx % 2 === 0 ? '' : '-';\n    return `${one}${dash}${two.toLowerCase()}`;\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/dash-case.js","import native from './native';\nimport root from './root';\n\nconst { MutationObserver } = root;\n\nfunction microtaskDebounce (cbFunc) {\n  let scheduled = false;\n  let i = 0;\n  let cbArgs = [];\n  const elem = document.createElement('span');\n  const observer = new MutationObserver(() => {\n    cbFunc(...cbArgs);\n    scheduled = false;\n    cbArgs = null;\n  });\n\n  observer.observe(elem, { childList: true });\n\n  return (...args) => {\n    cbArgs = args;\n    if (!scheduled) {\n      scheduled = true;\n      elem.textContent = `${i}`;\n      i += 1;\n    }\n  };\n}\n\n// We have to use setTimeout() for IE9 and 10 because the Mutation Observer\n// polyfill requires that the element be in the document to trigger Mutation\n// Events. Mutation Events are also synchronous and thus wouldn't debounce.\n//\n// The soonest we can set the timeout for in IE is 1 as they have issues when\n// setting to 0.\nfunction taskDebounce (cbFunc) {\n  let scheduled = false;\n  let cbArgs = [];\n  return (...args) => {\n    cbArgs = args;\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        cbFunc(...cbArgs);\n      }, 1);\n    }\n  };\n}\nexport default native(MutationObserver) ? microtaskDebounce : taskDebounce;\n\n\n\n// WEBPACK FOOTER //\n// src/util/debounce.js","export default function error (message) {\n  throw new Error(message);\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/error.js","export default function getDefaultValue (elem, propDef) {\n  return typeof propDef.default === 'function'\n    ? propDef.default(elem, { name: propDef.nameOrSymbol })\n    : propDef.default;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/get-default-value.js","export default function getInitialValue (elem, propDef) {\n  return typeof propDef.initial === 'function'\n    ? propDef.initial(elem, { name: propDef.nameOrSymbol })\n    : propDef.initial;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/get-initial-value.js","import getPropNamesAndSymbols from './get-prop-names-and-symbols';\n\nexport default function (obj = {}) {\n  return getPropNamesAndSymbols(obj).reduce((prev, nameOrSymbol) => {\n    prev[nameOrSymbol] = Object.getOwnPropertyDescriptor(obj, nameOrSymbol);\n    return prev;\n  }, {});\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/get-own-property-descriptors.js","import data from './data';\n\nexport default function getPropData (elem, name) {\n  const elemData = data(elem, 'props');\n  return elemData[name] || (elemData[name] = {});\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/get-prop-data.js","const nativeHints = [\n  'native code',\n  '[object MutationObserverConstructor]' // for mobile safari iOS 9.0\n];\nexport default fn => nativeHints.map(\n  (hint) => (fn || '').toString().indexOf([hint]) > -1\n).reduce((a, b) => a || b);\n\n\n\n// WEBPACK FOOTER //\n// src/util/native.js","import assign from './assign';\n\nfunction enter (object, props) {\n  const saved = {};\n  Object.keys(props).forEach((key) => {\n    saved[key] = object[key];\n    object[key] = props[key];\n  });\n  return saved;\n}\n\nfunction exit (object, saved) {\n  assign(object, saved);\n}\n\n// Decorates a function with a side effect that changes the properties of an\n// object during its execution, and restores them after. There is no error\n// handling here, if the wrapped function throws an error, properties are not\n// restored and all bets are off.\nexport default function (object, props) {\n  return func => (...args) => {\n    const saved = enter(object, props);\n    const result = func(...args);\n    exit(object, saved);\n    return result;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/prop-context.js","import dashCase from './dash-case';\nimport empty from './empty';\nimport error from './error';\nimport {\n  isFunction,\n  isObject,\n  isString,\n  isSymbol\n} from './is-type';\n\n/**\n * @internal\n * Property Definition\n *\n * Internal meta data and strategies for a property.\n * Created from the options of a PropOptions config object.\n *\n * Once created a PropDefinition should be treated as immutable and final.\n * 'getPropsMap' function memoizes PropDefinitions by Component's Class.\n *\n * The 'attribute' option is normalized to 'attrSource' and 'attrTarget' properties.\n */\nexport default class PropDefinition {\n\n  constructor (nameOrSymbol, propOptions) {\n    this._nameOrSymbol = nameOrSymbol;\n\n    propOptions = propOptions || {};\n\n    // default 'attrSource': no observed source attribute (name)\n    this.attrSource = null;\n\n    // default 'attrTarget': no reflected target attribute (name)\n    this.attrTarget = null;\n\n    // default 'attrTargetIsNotSource'\n    this.attrTargetIsNotSource = false;\n\n    // default 'coerce': identity function\n    this.coerce = value => value;\n\n    // default 'default': set prop to 'null'\n    this.default = null;\n\n    // default 'deserialize': return attribute's value (string or null)\n    this.deserialize = value => value;\n\n    // default 'get': no function\n    this.get = null;\n\n    // 'initial' default: unspecified\n    // 'initial' option is truly optional and it cannot be initialized.\n    // Its presence is tested using: ('initial' in propDef)\n\n    // 'serialize' default: return string value or null\n    this.serialize = value => (empty(value) ? null : String(value));\n\n    // default 'set': no function\n    this.set = null;\n\n    // Note: option key is always a string (no symbols here)\n    Object.keys(propOptions).forEach(option => {\n      const optVal = propOptions[option];\n\n      // Only accept documented options and perform minimal input validation.\n      switch (option) {\n        case 'attribute':\n          if (!isObject(optVal)) {\n            this.attrSource = this.attrTarget = resolveAttrName(optVal, nameOrSymbol);\n          } else {\n            const { source, target } = optVal;\n            if (!source && !target) {\n              error(`${option} 'source' or 'target' is missing.`);\n            }\n            this.attrSource = resolveAttrName(source, nameOrSymbol);\n            this.attrTarget = resolveAttrName(target, nameOrSymbol);\n            this.attrTargetIsNotSource = this.attrTarget !== this.attrSource;\n          }\n          break;\n        case 'coerce':\n        case 'deserialize':\n        case 'get':\n        case 'serialize':\n        case 'set':\n          if (isFunction(optVal)) {\n            this[option] = optVal;\n          } else {\n            error(`${option} must be a function.`);\n          }\n          break;\n        case 'default':\n        case 'initial':\n          this[option] = optVal;\n          break;\n        default:\n          // TODO: undocumented options?\n          this[option] = optVal;\n          break;\n      }\n    });\n  }\n\n  get nameOrSymbol () {\n    return this._nameOrSymbol;\n  }\n\n}\n\nfunction resolveAttrName (attrOption, nameOrSymbol) {\n  if (isSymbol(nameOrSymbol)) {\n    error(`${nameOrSymbol.toString()} symbol property cannot have an attribute.`);\n  } else {\n    if (attrOption === true) {\n      return dashCase(String(nameOrSymbol));\n    }\n    if (isString(attrOption)) {\n      return attrOption;\n    }\n  }\n  return null;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/prop-definition.js","// DEPRECATED prefix when we deprecated the name argument to define()\nexport default function uniqueId (prefix) {\n  // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\n  const rand = 'xxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = Math.random() * 16 | 0;\n    // eslint-disable-next-line no-mixed-operators\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n  return `${prefix || 'x'}-${rand}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/util/unique-id.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 37\n// module chunks = 0"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpCA;AACA;;;AAGA;AAAA;AACA;AAAA;AACA;AAGA;;;;;;;;;;;ACTA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;ACJA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;ACNA;AAAA;AACA;AAAA;AACA;;;;;;;;ACFA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9BA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAtDA;AAuDA;AACA;AACA;AACA;AACA;;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAlTA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AADA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzGA;AAGA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AACA;AACA;;;;;;;;;;;;;ACzBA;;;;AAIA;AACA;;;;;;;;;ACLA;AACA;;;AAGA;AAAA;AAAA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC3inLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AACA;AASA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjWA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpGA;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/CA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AAGA;;;;;;;;ACJA;AACA;AAGA;;;;;;;;ACJA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAFA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;AAYA;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAkCA;AACA;AACA;;;AACA;AACA;AACA;;;;;;AAlFA;AACA;AACA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;","sourceRoot":""}